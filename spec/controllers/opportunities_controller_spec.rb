require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe OpportunitiesController, type: :controller do
  render_views
  
  # This should return the minimal set of attributes required to create a valid
  # Opportunity. As you add validations to Opportunity, be sure to
  # adjust the attributes here as well.
  let(:employer) { build :employer, id: 1001 }
  
  let(:industry) { create :industry }
  let(:interest) { create :interest }

  let(:valid_attributes) { attributes_for :opportunity, employer_id: employer.id }
  let(:invalid_attributes) { { employer_id: ''} }
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OpportunitiesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
    allow(Employer).to receive(:find).with(employer.id.to_s).and_return(employer)
    allow_any_instance_of(Opportunity).to receive(:employer).and_return(employer)
  end

  describe "GET #index" do
    it "returns a success response" do
      opportunity = Opportunity.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      opportunity = Opportunity.create! valid_attributes
      get :show, params: {id: opportunity.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      opportunity = Opportunity.create! valid_attributes
      get :edit, params: {id: opportunity.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_name) { valid_attributes[:name] + ' 2' }
      let(:new_attributes) { {name: new_name} }

      it "updates the requested opportunity" do
        opportunity = Opportunity.create! valid_attributes
        put :update, params: {id: opportunity.to_param, opportunity: new_attributes}, session: valid_session
        opportunity.reload
      
        expect(opportunity.name).to eq(new_name)
      end

      it "redirects to the opportunity" do
        opportunity = Opportunity.create! valid_attributes
        put :update, params: {id: opportunity.to_param, opportunity: valid_attributes}, session: valid_session
        expect(response).to redirect_to(opportunity_path(opportunity))
      end

      it "associates specified industries with the opportunity" do
        opportunity = Opportunity.create! valid_attributes
        put :update, params: {id: opportunity.to_param, opportunity: new_attributes.merge(industry_ids: [industry.id.to_s])}, session: valid_session
        opportunity.reload
      
        expect(opportunity.industries).to include(industry)
      end

      it "associates specified interests with the opportunity" do
        opportunity = Opportunity.create! valid_attributes
        put :update, params: {id: opportunity.to_param, opportunity: new_attributes.merge(interest_ids: [interest.id.to_s])}, session: valid_session
        opportunity.reload
      
        expect(opportunity.interests).to include(interest)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        opportunity = Opportunity.create! valid_attributes
        put :update, params: {id: opportunity.to_param, opportunity: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested opportunity" do
      opportunity = Opportunity.create! valid_attributes
      expect {
        delete :destroy, params: {id: opportunity.to_param}, session: valid_session
      }.to change(Opportunity, :count).by(-1)
    end

    it "redirects to the opportunities list" do
      opportunity = Opportunity.create! valid_attributes
      delete :destroy, params: {id: opportunity.to_param}, session: valid_session
      expect(response).to redirect_to(employer_opportunities_url(employer))
    end
  end

  describe "with employer nesting" do    
    describe "GET #index" do
      it "returns a success response" do
        opportunity = Opportunity.create! valid_attributes
        get :index, params: {employer_id: employer.id}, session: valid_session
        expect(response).to be_successful
      end
    end

    describe "GET #new" do
      it "returns a success response" do
        get :new, params: {employer_id: employer.id}, session: valid_session
        expect(response).to be_successful
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Opportunity" do
          expect {
            post :create, params: {employer_id: employer.id, opportunity: valid_attributes}, session: valid_session
          }.to change(Opportunity, :count).by(1)
        end

        it "redirects to the created opportunity" do
          post :create, params: {employer_id: employer.id, opportunity: valid_attributes}, session: valid_session
          expect(response).to redirect_to(opportunity_path(Opportunity.last))
        end

        it "associates specified industries with the opportunity" do
          post :create, params: {employer_id: employer.id, opportunity: valid_attributes.merge(industry_ids: [industry.id.to_s])}, session: valid_session
          expect(Opportunity.last.industries).to include(industry)
        end

        it "associates specified interests with the opportunity" do
          post :create, params: {employer_id: employer.id, opportunity: valid_attributes.merge(interest_ids: [interest.id.to_s])}, session: valid_session
          expect(Opportunity.last.interests).to include(interest)
        end
      end

      context "with invalid params" do
        it "returns a success response (i.e. to display the 'new' template)" do
          post :create, params: {employer_id: employer.id, opportunity: invalid_attributes}, session: valid_session
          expect(response).to be_successful
        end
      end
    end
  end
end
